// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ApplicationCore.Validators.ParameterValidators.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\GoogleDrive\Documents\szakdoga\anonymizer\AnonymizerCore\ApplicationCore\Validators\ParameterValidators\Templates\PrimaryKeyValidationTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class PrimaryKeyValidationTemplate : PrimaryKeyValidationTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"

/****** Object:  StoredProcedure [dbo].[sp_SimpleAnonymizer]    Script Date: 2019. 01. 17. 10:35:57 ******/
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON

-- =============================================
-- Author:		Mark Rusz
-- Create date: 2019-01-15
-- Description:	Scrambles the given columns and sets other given columns to a constant value for a table
-- =============================================

SET XACT_ABORT, NOCOUNT ON

--Input parameters
declare @db nvarchar(128), @schema nvarchar(128), @table nvarchar(128)
declare @constant_columns table(column_name nvarchar(128))
declare @scrambled_columns table(column_name nvarchar(128))

insert into @constant_columns values 
");
            
            #line 26 "E:\GoogleDrive\Documents\szakdoga\anonymizer\AnonymizerCore\ApplicationCore\Validators\ParameterValidators\Templates\PrimaryKeyValidationTemplate.tt"
  for (int i=0; i<ConstantColumns.Count;i++)
    {         
        if (i < (ConstantColumns.Count-1)) 
        {
            Write("('" + ConstantColumns[i] + "')" + "," + Environment.NewLine);
        }
        else 
        {
            Write("('" + ConstantColumns[i] + "');" + Environment.NewLine);
        }
    }

            
            #line default
            #line hidden
            this.Write(" \r\n\r\ninsert into @scrambled_columns values \r\n");
            
            #line 40 "E:\GoogleDrive\Documents\szakdoga\anonymizer\AnonymizerCore\ApplicationCore\Validators\ParameterValidators\Templates\PrimaryKeyValidationTemplate.tt"
  for (int i=0; i<ScrambledColumns.Count;i++)
    {         
        if (i < (ScrambledColumns.Count-1)) 
        {
            Write("('" + ScrambledColumns[i] + "')" + "," + Environment.NewLine);
        }
        else 
        {
            Write("('" + ScrambledColumns[i] + "');" + Environment.NewLine);
        }
    }

            
            #line default
            #line hidden
            this.Write(" \r\n\r\nset @db = ");
            
            #line 53 "E:\GoogleDrive\Documents\szakdoga\anonymizer\AnonymizerCore\ApplicationCore\Validators\ParameterValidators\Templates\PrimaryKeyValidationTemplate.tt"
    Write("'" + Database + "';" + Environment.NewLine); 
            
            #line default
            #line hidden
            this.Write("set @schema = ");
            
            #line 54 "E:\GoogleDrive\Documents\szakdoga\anonymizer\AnonymizerCore\ApplicationCore\Validators\ParameterValidators\Templates\PrimaryKeyValidationTemplate.tt"
    Write("'" + Schema + "';" + Environment.NewLine); 
            
            #line default
            #line hidden
            this.Write("set @table = ");
            
            #line 55 "E:\GoogleDrive\Documents\szakdoga\anonymizer\AnonymizerCore\ApplicationCore\Validators\ParameterValidators\Templates\PrimaryKeyValidationTemplate.tt"
    Write("'" + Table + "';" + Environment.NewLine); 
            
            #line default
            #line hidden
            this.Write("\r\n--Variables to store the error messages and the operation that is currently don" +
                    "e\r\ndeclare  @error_message nvarchar(500), @operation nvarchar(200) \r\n\r\ndeclare @" +
                    "full_table_name nvarchar(300) = @db + \'.\' + @schema + \'.\' + @table\r\n\r\nBEGIN TRY\r" +
                    "\n\r\n-- Primary key checkings\r\n\r\n\t-- We create a table that contains all the prima" +
                    "ry key columns and unique constraint columns\r\n\r\n\tdeclare @check_script nvarchar(" +
                    "MAX) = \'\', @check_count int\r\n\tdeclare @all_columns_list table ([column_name] nva" +
                    "rchar(128))\r\n\r\n\tinsert into @all_columns_list \r\n\t\tselect column_name from @const" +
                    "ant_columns\r\n\t\tunion \r\n\t\tselect column_name from @scrambled_columns\r\n\r\n\tdeclare " +
                    "@unique_pr_column_list table([column_name] nvarchar(128), [is_unique_constraint]" +
                    " nvarchar(128), \r\n\t\t\t\t\t\t\t\t\t\t[is_primary_key] nvarchar(128))\r\n\r\n    set @check_sc" +
                    "ript =\t \'(select c.name, i.is_unique_constraint, i.is_primary_key\r\n\t\t\t    from \'" +
                    " + @db + \'.sys.columns c\r\n\t\t\t\tinner join \' + @db + \'.\' + \'sys.index_columns ic o" +
                    "n c.object_id = ic.object_id and c.column_id = ic.column_id\r\n\t\t\t\tinner join \' + " +
                    "@db + \'.\' + \'sys.indexes i on ic.object_id = i.object_id and ic.index_id = i.ind" +
                    "ex_id\r\n\t\t\t\twhere \r\n\t\t\t     \t(i.is_unique_constraint = 1 or i.is_primary_key = 1)" +
                    "\r\n\t\t\t\tand i.is_disabled = 0\r\n\t\t\t\tand\tc.object_id = OBJECT_ID(\'\'\' + @db + \'.\' + @" +
                    "schema + \'.\' + @table + \'\'\'))\'\r\n\t\r\n\tinsert into @unique_pr_column_list exec (@ch" +
                    "eck_script)\r\n\r\n--- We check whether the table has a primary key\r\n\r\n\tset @operati" +
                    "on = \'checking if the table has a primary key\'\r\n\r\n\tselect @check_count = count(1" +
                    ") from @unique_pr_column_list l where l.is_primary_key = 1\r\n\r\n\tif @check_count =" +
                    " 0\r\n\tbegin\r\n\t\tset @error_message = \'The table \' + @db + \'.\' + @schema + \'.\' + @t" +
                    "able + \' has no primary key!\'\r\n\t\traiserror(@error_message, 16, 1)\r\n\tend\r\n\r\n\t-- W" +
                    "e check whether any of the input columns is part of a primary key or a unique co" +
                    "nstraint\r\n\t\r\n\tdeclare @input_unique_intersection table([column_name] nvarchar(12" +
                    "8), [is_unique_constraint] nvarchar(128),\r\n\t\t\t\t\t\t\t\t\t\t\t [is_primary_key] nvarchar" +
                    "(128))\r\n\r\n\tinsert into @input_unique_intersection \r\n\tselect up.column_name, up.i" +
                    "s_primary_key, up.is_unique_constraint\r\n\tfrom @unique_pr_column_list up \r\n\tjoin " +
                    "@all_columns_list al on up.column_name = al.column_name \r\n\r\n\tselect @check_count" +
                    " = count(1) from @input_unique_intersection\r\n\r\n\tif @check_count <> 0 \r\n\tbegin\r\n\t" +
                    "\tdeclare @unique_columns_str nvarchar(max) = \'\', @prkey_columns_str nvarchar(max" +
                    ") = \'\'\r\n\t\t\r\n\t\tselect @unique_columns_str = @unique_columns_str + \' [\' + column_n" +
                    "ame + \'] \' \r\n\t\tfrom @input_unique_intersection i \r\n\t\twhere i.is_primary_key = 1\r" +
                    "\n\r\n\t\tif @unique_columns_str <> \'\'\r\n\t\tbegin\r\n\t\t\tset @error_message = \'The followi" +
                    "ng input columns are part of a unique constraint: \' + @unique_columns_str + \' .\'" +
                    " + CHAR(13) + CHAR(11)\r\n\t\tend\r\n\r\n\t\tselect @prkey_columns_str = @prkey_columns_st" +
                    "r + \' [\' + column_name + \'] \'\r\n\t\tfrom @input_unique_intersection i \r\n\t\twhere i.i" +
                    "s_unique_constraint = 1\r\n\r\n\t\tif @prkey_columns_str <> \'\'\r\n\t\tbegin\r\n\t\t\tset @error" +
                    "_message = \'The following input columns are part of a primary key constraint: \' " +
                    "+ @prkey_columns_str + \' .\' + CHAR(13) + CHAR(11) \r\n\t\tend\r\n\r\n\t\traiserror(@error_" +
                    "message, 16, 1)\r\n\tend\r\n\r\nEND TRY\r\nBEGIN CATCH\r\n\t\r\n\tset @error_message  =\'Error w" +
                    "hile \' +  @operation + \' - \' + error_message() + \'. Line: \'\r\n\t\t\t+ convert(nvarch" +
                    "ar,error_line())\r\n\traiserror(@error_message,16,1)\r\n\treturn\r\n\r\nEND CATCH");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class PrimaryKeyValidationTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
