<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

alter table <#= TableInfo.FullTableName #> disable trigger all; 

create table #prim_keys_and_columns
(
  <#  for(int i=0;i<TableInfo.PrimaryKeysAndTypes.Count;i++) 
      {
        var columnName = TableInfo.PrimaryKeysAndTypes.Keys.ElementAt(i);
        Write($"{columnName} {TableInfo.PrimaryKeysAndTypes[columnName]}, ");                      
      }
 
      for(int i=0;i<TableInfo.SoloScrambledColumnsAndTypes.Count;i++) 
      {
        var columnName = TableInfo.SoloScrambledColumnsAndTypes.Keys.ElementAt(i);
        Write($"{columnName} {TableInfo.SoloScrambledColumnsAndTypes[columnName]}, ");              
      }
    
     for(int i=0;i<TableInfo.PairedColumnsInside.Count;i++) 
      {
        var pairedColumns = TableInfo.PairedColumnsInside[i];
        for(int j = 0; j<pairedColumns.Count;j++) 
        {
            var columnName = pairedColumns.Keys.ElementAt(j);
            Write($"{columnName} {pairedColumns[columnName]}, ");
        }   
      }
    #> 
    rownum int
);

<#   
    for(int i = 0; i < TableInfo.SoloScrambledColumnsAndTypes.Count; i++, _scrambleTableNumber++) 
    {
        var columnName = TableInfo.SoloScrambledColumnsAndTypes.Keys.ElementAt(i);
#>
create table #column<#=_scrambleTableNumber #>
(   
  random int,   
  <#= columnName #> <#=TableInfo.SoloScrambledColumnsAndTypes[columnName] #>     
);
<#
    }
#>


<#   
    for(int i = 0; i < TableInfo.PairedColumnsInside.Count; i++, _scrambleTableNumber++) 
    {
        var pairedColumns = TableInfo.PairedColumnsInside[i];
#>
create table #column<#=_scrambleTableNumber #>
( 
 <#  
    foreach(var columnName in pairedColumns.Keys) 
    { 
     Write($"{columnName} {pairedColumns[columnName]}, ");
    } 
    #>    
 random int             
);
<#
    }
#>

insert into #prim_keys_and_columns with (tablock)
    select <# 
    foreach(var columnName in TableInfo.PrimaryKeysAndTypes.Keys) 
    {
        Write($"{columnName}, ");
    }

    foreach(var columnName in TableInfo.SoloScrambledColumnsAndTypes.Keys) 
    {
        Write($"{columnName}, ");
    }

    foreach(var pairedColumns in TableInfo.PairedColumnsInside) 
    {   
        foreach(var columnName in pairedColumns.Keys)
        {
            Write($"{columnName}, ");
        }
    }    
#> row_number() over (order by 
    <#
    for(int i = 0; i < TableInfo.PrimaryKeysAndTypes.Count; i++)
    {   
        var columnName= TableInfo.PrimaryKeysAndTypes.Keys.ElementAt(i);
        Write($"{columnName}");

        if (i != (TableInfo.PrimaryKeysAndTypes.Count - 1))
        {
            Write(", ");
        }
    }
    #> )
    from <#= TableInfo.FullTableName #>;


<#    _scrambleTableNumber = 0;
    for(int i = 0; i < TableInfo.SoloScrambledColumnsAndTypes.Count; i++, _scrambleTableNumber++) 
    {
        var columnName = TableInfo.SoloScrambledColumnsAndTypes.Keys.ElementAt(i);
#>
insert into #column<#=_scrambleTableNumber #> with (tablock)
    select row_number() over (order by x), <#= columnName #> from 
    (select CHECKSUM(NewId()) x, <#= columnName #> from #prim_keys_and_columns) a;
<#
    }
#>


<#   
    for(int i = 0; i < TableInfo.PairedColumnsInside.Count; i++, _scrambleTableNumber++) 
    {
        var pairedColumns = TableInfo.PairedColumnsInside[i];
#>
insert into #column<#=_scrambleTableNumber #> with (tablock)
    select row_number() over (order by x), <#  
        for(int j = 0; j < pairedColumns.Count; j++) 
        { 
            var columnName = pairedColumns.Keys.ElementAt(j);
            Write($"{columnName}");
            
            if (j != (pairedColumns.Count-1))
            {
                Write(", ");
            }
        } 
    #>    
    from (select CHECKSUM(NewId()) x, <#  
        for(int j = 0; j < pairedColumns.Count; j++) 
        { 
            var columnName = pairedColumns.Keys.ElementAt(j);
            Write($"{columnName}");
            
            if (j != (pairedColumns.Count-1))
            {
                Write(", ");
            }
        } 
    #> from #prim_keys_and_columns) a;             
<#
    }
#>


create index idx_primarykey on #prim_keys_and_columns(  <#
    for(int i = 0; i < TableInfo.PrimaryKeysAndTypes.Count; i++)
    {   
        var columnName= TableInfo.PrimaryKeysAndTypes.Keys.ElementAt(i);
        Write($"{columnName}");

        if (i != (TableInfo.PrimaryKeysAndTypes.Count - 1))
        {
            Write(", ");
        }
    }
    #> );

<#
    for(int i = 0; i < _scrambleTableNumber; i++)
    {
        Write($"create index idx_column{i}_random on #column{i}(random);");
        Write(Environment.NewLine);
    }
#>

alter table <#=TableInfo.FullTableName #> nocheck constraint all;

update <#= TableInfo.FullTableName #> with (tablock) 
set <#
    for(int i = 0; i < TableInfo.SoloScrambledColumnsAndTypes.Count; i++)
    {   
        var columnName= TableInfo.SoloScrambledColumnsAndTypes.Keys.ElementAt(i);
        Write($"{columnName} = x.{columnName}");

        if ((i == (TableInfo.SoloScrambledColumnsAndTypes.Count - 1)) &&
            (TableInfo.PairedColumnsInside.Count == 0) && 
            (TableInfo.ConstantColumnsAndTypesAndValues.Count == 0) )
        {}
        else 
        { 
            Write(", ");
        }      
    }
    
    for(int i=0;i<TableInfo.PairedColumnsInside.Count;i++) 
    {
        var pairedColumns = TableInfo.PairedColumnsInside[i];
        for(int j = 0; j < pairedColumns.Count;j++) 
        {
            var columnName = pairedColumns.Keys.ElementAt(j);
            Write($"{columnName} = x.{columnName}");

            if ((j == (pairedColumns.Count - 1)) && (i == TableInfo.PairedColumnsInside.Count - 1) &&
                (TableInfo.ConstantColumnsAndTypesAndValues.Count == 0) )
                {}
            else 
            { 
                Write(", ");
            } 
        }   
    }

    for(int i=0;i<TableInfo.ConstantColumnsAndTypesAndValues.Count;i++) 
    {
        var column = TableInfo.ConstantColumnsAndTypesAndValues[i];
        Write($"{column.Name} = cast('{column.Value}' as {column.Type})");                      
    }
    #> from
(
    select 
)